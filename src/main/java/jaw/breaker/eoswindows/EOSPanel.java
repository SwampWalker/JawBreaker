/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jaw.breaker.eoswindows;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import jaw.breaker.datasets.EOSDataset;
import jaw.breaker.equationsOfState.TabulatedHermite;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author tonita
 */
public class EOSPanel extends javax.swing.JPanel implements EOSStorage {

    private EOSDataset eos = null;
    private JFreeChart chart;

    /**
     * Creates new form EOSPanel
     */
    public EOSPanel() {
        eos = new EOSDataset();
        initComponents();
        jPanelLeft.setLayout(new BorderLayout());
        jPanelLeft.add(createChartPanel(), BorderLayout.CENTER);
    }

    private static JFreeChart createChart(XYDataset dataset, JFreeChart chart) {
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setNoDataMessage("NO DATA");
        plot.setDomainZeroBaselineVisible(true);
        plot.setRangeZeroBaselineVisible(true);

        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) plot.getRenderer();
        renderer.setSeriesOutlinePaint(0, Color.black);
        renderer.setUseOutlinePaint(true);
        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
        domainAxis.setAutoRange(true);
        domainAxis.setAutoRangeIncludesZero(false);
        domainAxis.setTickMarkInsideLength(2.0f);
        domainAxis.setTickMarkOutsideLength(0.0f);

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setTickMarkInsideLength(2.0f);
        rangeAxis.setTickMarkOutsideLength(0.0f);

        return chart;
    }

    /**
     * Creates a chart panel for plotting the EOSs.
     *
     * @return A panel.
     */
    public JPanel createChartPanel() {
        chart = createChart(eos, ChartFactory.createScatterPlot("Equations of State", eos.getDomainName(), eos.getRangeName(), eos, PlotOrientation.VERTICAL, true, false, false));
        ChartPanel chartPanel = new ChartPanel(chart);
        //chartPanel.setVerticalAxisTrace(true);
        //chartPanel.setHorizontalAxisTrace(true);
        // popup menu conflicts with axis trace
        //chartPanel.setPopupMenu(null);

        chartPanel.setDomainZoomable(true);
        chartPanel.setRangeZoomable(true);
        chartPanel.setMouseWheelEnabled(true);
        return chartPanel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewEOSDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(NewEOSDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(NewEOSDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(NewEOSDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JFrame aFrame = new JFrame();
                aFrame.getContentPane().setLayout(new BorderLayout());
                aFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                EOSPanel eosPanel = new EOSPanel();
                aFrame.add(eosPanel, BorderLayout.CENTER);
                aFrame.setVisible(true);
                aFrame.setSize(1024, 768);
                aFrame.pack();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelRight = new javax.swing.JPanel();
        newEOSButton = new javax.swing.JButton();
        eosDisplayOuterPanel = new javax.swing.JPanel();
        eosDisplayPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        domainComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rangeComboBox = new javax.swing.JComboBox();
        logarithmDomain = new javax.swing.JCheckBox();
        logarithmRange = new javax.swing.JCheckBox();
        jPanelLeft = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(1224, 768));
        setMinimumSize(new java.awt.Dimension(1224, 768));
        setPreferredSize(new java.awt.Dimension(1224, 768));

        jSplitPane1.setDividerLocation(860);

        newEOSButton.setText("New Equation of State");
        newEOSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEOSButtonActionPerformed(evt);
            }
        });

        eosDisplayOuterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Equations of state"));
        eosDisplayOuterPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        eosDisplayPanel.setLayout(new java.awt.GridBagLayout());
        eosDisplayOuterPanel.add(eosDisplayPanel);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Plot Properties"));

        domainComboBox.setModel(new DefaultComboBoxModel(eos.getVariableNames()));
        domainComboBox.setSelectedIndex(1);
        domainComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotPropertyChangeHandler(evt);
            }
        });

        jLabel1.setText("Domain (x) variable:");

        jLabel2.setText("Range (y) variable:");

        rangeComboBox.setModel(new DefaultComboBoxModel(eos.getVariableNames()));
        rangeComboBox.setSelectedIndex(2);
        rangeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotPropertyChangeHandler(evt);
            }
        });

        logarithmDomain.setText("Log scale in domain");
        logarithmDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotPropertyChangeHandler(evt);
            }
        });

        logarithmRange.setText("Log scale in range");
        logarithmRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlotPropertyChangeHandler(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(domainComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rangeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logarithmRange)
                            .addComponent(logarithmDomain)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 189, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domainComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rangeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logarithmDomain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logarithmRange)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelRightLayout = new javax.swing.GroupLayout(jPanelRight);
        jPanelRight.setLayout(jPanelRightLayout);
        jPanelRightLayout.setHorizontalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newEOSButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eosDisplayOuterPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelRightLayout.setVerticalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newEOSButton)
                .addGap(18, 18, 18)
                .addComponent(eosDisplayOuterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanelRight);

        javax.swing.GroupLayout jPanelLeftLayout = new javax.swing.GroupLayout(jPanelLeft);
        jPanelLeft.setLayout(jPanelLeftLayout);
        jPanelLeftLayout.setHorizontalGroup(
            jPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 859, Short.MAX_VALUE)
        );
        jPanelLeftLayout.setVerticalGroup(
            jPanelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 766, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanelLeft);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents
    NewEOSDialog newEOSDialog;
    ArrayList<TabulatedHermite> eosStorage = new ArrayList<TabulatedHermite>();
    ArrayList<JCheckBox> eosCheckBoxes = new ArrayList<JCheckBox>();

    private void newEOSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEOSButtonActionPerformed
        if (newEOSDialog == null) {
            newEOSDialog = new NewEOSDialog(null, false, this);
        }
        newEOSDialog.setVisible(true);
    }//GEN-LAST:event_newEOSButtonActionPerformed

    private void PlotPropertyChangeHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlotPropertyChangeHandler
        int iX = domainComboBox.getSelectedIndex();
        int iY = rangeComboBox.getSelectedIndex();
        eos.setDomainVariable(iX);
        eos.setRangeVariable(iY);
        String domainName = eos.getDomainName();
        String rangeName = eos.getRangeName();
        if (logarithmDomain.isSelected()) {
            chart.getXYPlot().setDomainAxis(new LogarithmicAxis("Log(" + domainName + ")"));
        } else {
            chart.getXYPlot().setDomainAxis(new NumberAxis(domainName));
        }
        if (logarithmRange.isSelected()) {
            chart.getXYPlot().setRangeAxis(new LogarithmicAxis("Log(" + rangeName + ")"));
        } else {
            chart.getXYPlot().setRangeAxis(new NumberAxis(rangeName));
        }
        chart.getXYPlot().datasetChanged(null);
    }//GEN-LAST:event_PlotPropertyChangeHandler

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox domainComboBox;
    private javax.swing.JPanel eosDisplayOuterPanel;
    private javax.swing.JPanel eosDisplayPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelLeft;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JCheckBox logarithmDomain;
    private javax.swing.JCheckBox logarithmRange;
    private javax.swing.JButton newEOSButton;
    private javax.swing.JComboBox rangeComboBox;
    // End of variables declaration//GEN-END:variables

    public void add(TabulatedHermite eos) {
        // Order eos by identifier.
        String id = eos.getIdentifier();
        int index = 0;
        boolean duplicate = false;
        for (int i = 0; i < eosStorage.size() && !duplicate; i++) {
            int compareTo = eosStorage.get(i).getIdentifier().compareTo(id);
            if (compareTo == 0) {
                duplicate = true;
            } else if (compareTo < 0) {
                index = i + 1;
            } // Could terminate after we get > 0...
        }

        // Add eos.
        if (!duplicate) {
            JCheckBox eosBox = new JCheckBox(id);
            eosBox.setSelected(true);
            eosCheckBoxes.add(index, eosBox);
            eosStorage.add(index, eos);
            this.eos.add(eos);

            renderEOSDisplay();
        }
    }

    /**
     * Adds all the equations of state to the eosDisplayPanel.
     */
    private void renderEOSDisplay() {
        // Empty...
        eosDisplayPanel.removeAll();

        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.weighty = 1.0;
        c.weightx = .1;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;

        for (int i = 0; i < eosCheckBoxes.size(); i++) {
            c.gridy = i;
            eosDisplayPanel.add(eosCheckBoxes.get(i), c);
            eosDisplayOuterPanel.validate();
        }

        chart.getXYPlot().datasetChanged(null);
    }
}
